function [CA,CY,CN,CLL,CM,CLN,CMQ,CMAD,CLLP,CLLR,CLNP,CLNR,CAQ,CNQ,CNAD,CYR,CYP,CLLB,CYB,CLNB,XCP,CD,CL] = Run_Missile_Datcom(SREF, LREF, XCG_dry, ALT, PHI, NMACH, MACH, NALPHA, ALPHA, NC_type, NC_power, NC_length,NC_diam, AF1_length,AF1_diam, FN1_number, FN1_type, FN1_NACA, FN1_height, FN1_root, FN1_tip, FN1_XLE, FN1_sweep, FN1_edgeRad, ZUPPER, ZLOWER, LMAXU, LMAXL, LFLATU, LFLATL, ROUGH, DEXIT, CurrentFolder)
%RUN_MISSILE_DATCOM Run missile datcom on a batch of cases and return parsed output

[SREF, LREF, XCG_dry, ALT, NC_length, NC_diam, AF1_length, AF1_diam, FN1_height, FN1_root, FN1_tip, FN1_XLE, FN1_edgeRad, ROUGH, DEXIT] = Convert_DATCOM_Input(SREF, LREF, XCG_dry, ALT, NC_length, NC_diam, AF1_length, AF1_diam, FN1_height, FN1_root, FN1_tip, FN1_XLE, FN1_edgeRad, ROUGH, DEXIT); % Converts necessary inputs from metric to imperial

if CurrentFolder ~= ""
    cd(CurrentFolder);
end

if FN1_type == "NACA"
    NACA_card = FN1_NACA + "\n";
else
    NACA_card = "";
end

fin_set_number = numel(FN1_number);

case_number = length(ALT);
cases = string(zeros([1, case_number]));

for c = 1:case_number
    if c ~= case_number
        SAVE_card = "SAVE\n";
    else
        SAVE_card = "";
    end

    if c == 1
        cases(c) = sprintf("DIM IN DEG\n" ... % Dimension setting
            +"$REFQ\n" ...  %%% Reference Values
            +" SREF = %.04f,\n" ...     % Surface area
            +" LREF = %.04f,\n" ...     % Reference length (diameter)
            +" XCG = %.04f,\n" ...      % Center of mass
            +" BLAYER = NATURAL,\n" ... % Boundary layer type (NATURAL, TURBULENT)
            +" ROUGH = %.05f,\n" ...   % Surface roughness [in]
            +"$END\n" ...
            + "$FLTCON\n" ... %%% Flight Conditions
            +" ALT = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ...
            +" ALT(8)= %.02f,\n" ...   % Altitude values
            +" ALT(9)= %.02f,\n"  + " ALT(10)= %.02f,\n" ...
            + " ALT(11)= %.02f,\n" + " ALT(12)= %.02f,\n" ...
            + " ALT(13)= %.02f,\n" + " ALT(14)= %.02f,\n" ...
            + " ALT(15)= %.02f,\n" + " ALT(16)= %.02f,\n" ...
            + " ALT(17)= %.02f,\n" + " ALT(18)= %.02f,\n" ...
            + " ALT(19)= %.02f,\n" + " ALT(20)= %.02f,\n" ...
            +" PHI = %.04f,\n" ...   % Roll angle
            +" NMACH = %.04f,\n" ...   % Number of Mach numbers
            +" MACH = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ...    % Mach numbers
            +" MACH(9) = %.02f,\n"  + " MACH(10) = %.02f,\n" + " MACH(11) = %.02f,\n" + " MACH(12) = %.02f,\n" ...
            +" MACH(13) = %.02f,\n" + " MACH(14) = %.02f,\n" + " MACH(15) = %.02f,\n" + " MACH(16) = %.02f,\n" ...
            +" MACH(17) = %.02f,\n" + " MACH(18) = %.02f,\n" + " MACH(19) = %.02f,\n" + " MACH(20) = %.02f,\n" ...
            +" NALPHA = %.04f,\n" ...   % Number of AoA
            +" ALPHA = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ... % Angles of attack
            +" ALPHA(9) = %.02f,\n" +" ALPHA(10) =%.02f,\n"  +" ALPHA(11) = %.02f,\n" +" ALPHA(12) = %.02f,\n" ...
            +" ALPHA(13) = %.02f,\n" +" ALPHA(14) = %.02f,\n" +" ALPHA(15) = %.02f,\n" +" ALPHA(16) = %.02f,\n" ...
            +" ALPHA(17) = %.02f,\n" +" ALPHA(18) = %.02f,\n" +" ALPHA(19) = %.02f,\n" +" ALPHA(20) = %.02f,\n" ...
            +"$END\n" ...
            +"$AXIBOD\n" ... %%% Geometry Specifications
            +" X0 = 0.000000,\n" ...    % Position of start of geometry
            +" TNOSE = %s,\n" ...   % Nosecone type 
            +" POWER = %.04f,\n" ...   % Exponent for power law shape  
            +" LNOSE = %.04f,\n" ...    % NC Length
            +" DNOSE = %.04f,\n" ...    % NC Diameter
            +" LCENTR = %.04f,\n" ...   % Airframe length
            +" DCENTR = %.04f,\n" ...   % AF diameter
            +" DEXIT = %.04f,\n" ...      % Exit Diameter, 0 makes base drag from body included in axial force calculations
            +"$END\n" ...
            ...$+"$PROTUB\n " ...
            ...%+" NPROT = 2.,\n," ...
            ...% +" PTYPE = FAIRING,SHOE,SHOE,\n" ...
            ...% +" XPROT = 25., 40., 80.,\n" ...
            ...% +" NLOC = 1., 1., 1.,\n" ...
            ...% +" LPROT = 3., 1.5, 1.5, 1.5, 1.5, 1.5, 1.5,\n" ...
            ...% +" WPROT = 1.18, 0.75, 0.1, 0.6, 0.75, 0.1, 0.6,\n" ...
            ...% +" HPROT = 0.66, 0.05, 0.2, 0.1, 0.05, 0.2, 0.1,\n" ...
            ...% +" OPROT = 0., 0., 0.05, 0.25, 0., 0.05, 0.25,\n" ...
            ...%+"$END\n" ...
            , SREF, LREF, XCG_dry, ROUGH, ALT(1), ALT(1), ALT(1), ALT(1), ALT(1), ALT(1), ALT(1), ALT(1), ... % Flight conditions
            ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),ALT(1),...
            PHI(1), NMACH, MACH(1), MACH(2), MACH(3), MACH(4), MACH(5),... % Mach numbers
            MACH(6), MACH(7), MACH(8), MACH(9), MACH(10), MACH(11),...
            MACH(12), MACH(13), MACH(14), MACH(15), MACH(16), MACH(17),...
            MACH(18), MACH(19), MACH(20),...
            NALPHA, ALPHA(1), ALPHA(2), ALPHA(3), ALPHA(4), ALPHA(5), ...   % Angles of attack
            ALPHA(6), ALPHA(7), ALPHA(8), ALPHA(9), ALPHA(10), ALPHA(11), ...
            ALPHA(12), ALPHA(13), ALPHA(14), ALPHA(15), ALPHA(16), ALPHA(17), ...
            ALPHA(18), ALPHA(19), ALPHA(20), ...
            NC_type,NC_power,NC_length,NC_diam, ...  % Nosecone variables
            AF1_length,AF1_diam, DEXIT); % Airframe variables
   
        for f = 1:fin_set_number
            cases(c) = cases(c) + sprintf(...
                "$FINSET%g\n" ... %%% Fins
                +" NPANEL = %.04f,\n" ...   % Number of fins
                +" SECTYP = %s,\n" ...     % Fin type
                +" SSPAN = 0.0,%.04f,\n" ...    % Fin height from airframe (fin span)
                +" CHORD = %.04f,%.04f,\n" ...  % Root and tip chord length
                +" XLE = %.04f,\n" ...      % Distance from X0 to start of leading edge
                +" SWEEP = %.04f,\n" ...    % Sweep angle
                +" STA = 0.0,\n" ...        % Chord station used in measuring sweep (0: leading edge, 1: trailing edge)
                +" LER = %.04f,\n" ...      % Leading edge radius
                +" ZUPPER = %.04f,\n" ...
                +" ZLOWER = %.04f,\n" ...
                +" LMAXU = %.04f,\n" ...
                +" LMAXL = %.04f,\n" ...
                +" LFLATU = %.04f,\n" ...
                +" LFLATL = %.04f,\n" ...
                +"$END\n" ...   %%% Control Cards
                , f, FN1_number(f),FN1_type(f),FN1_height(f),FN1_root(f),FN1_tip(f),FN1_XLE(f),FN1_sweep(f),FN1_edgeRad(f), ...
                ZUPPER(f),ZLOWER(f),LMAXU(f),LMAXL(f),LFLATU(f),LFLATL(f)); % Fin variables
        end

        cases(c) = cases(c) + sprintf(...
            "DAMP\n" ...       % Compute dynamic derivatives 
            +"SOSE\n" ...       % Second-Order Shock Expansion Method (Mach > 1.2)
            +"SPIN\n" ...       % Compute spin and magnus derivatives
            +"DERIV DEG\n" ...  % All output derivatives set to degrees (RAD: radians)
            +NACA_card ...
            +SAVE_card ...
            ...%+"PRINT GEOM FIN1\n" ...
            +"NEXT CASE\n");
    else
        cases(c) = sprintf("DIM IN DEG\n" ... % Dimension setting
            +"DELETE FLTCON\n" ...
            + "$FLTCON\n" ... %%% Flight Conditions
            +" ALT = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ...
            +" ALT(8)= %.02f,\n" ...   % Altitude values
            +" ALT(9)= %.02f,\n"  + " ALT(10)= %.02f,\n" ...
            + " ALT(11)= %.02f,\n" + " ALT(12)= %.02f,\n" ...
            + " ALT(13)= %.02f,\n" + " ALT(14)= %.02f,\n" ...
            + " ALT(15)= %.02f,\n" + " ALT(16)= %.02f,\n" ...
            + " ALT(17)= %.02f,\n" + " ALT(18)= %.02f,\n" ...
            + " ALT(19)= %.02f,\n" + " ALT(20)= %.02f,\n" ...
            +" PHI = %.04f,\n" ...   % Roll angle
            +" NMACH = %.04f,\n" ...   % Number of Mach numbers
            +" MACH = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ...    % Mach numbers
            +" MACH(9) = %.02f,\n"  + " MACH(10) = %.02f,\n" + " MACH(11) = %.02f,\n" + " MACH(12) = %.02f,\n" ...
            +" MACH(13) = %.02f,\n" + " MACH(14) = %.02f,\n" + " MACH(15) = %.02f,\n" + " MACH(16) = %.02f,\n" ...
            +" MACH(17) = %.02f,\n" + " MACH(18) = %.02f,\n" + " MACH(19) = %.02f,\n" + " MACH(20) = %.02f,\n" ...
            +" NALPHA = %.04f,\n" ...   % Number of AoA
            +" ALPHA = %.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,%.02f,\n" ... % Angles of attack
            +" ALPHA(9) = %.02f,\n" +" ALPHA(10) =%.02f,\n"  +" ALPHA(11) = %.02f,\n" +" ALPHA(12) = %.02f,\n" ...
            +" ALPHA(13) = %.02f,\n" +" ALPHA(14) = %.02f,\n" +" ALPHA(15) = %.02f,\n" +" ALPHA(16) = %.02f,\n" ...
            +" ALPHA(17) = %.02f,\n" +" ALPHA(18) = %.02f,\n" +" ALPHA(19) = %.02f,\n" +" ALPHA(20) = %.02f,\n" ...
            +"$END\n" ...   %%% Control Cards
            +"DAMP\n" ...       % Compute dynamic derivatives 
            +"SOSE\n" ...       % Second-Order Shock Expansion Method (Mach > 2)
            +"SPIN\n" ...       % Compute spin and magnus derivatives
            +"DERIV DEG\n" ...  % All output derivatives set to degrees (RAD: radians)
            +NACA_card ...
            +SAVE_card ...
            +"NEXT CASE\n", ALT(c), ALT(c), ALT(c), ALT(c), ALT(c), ALT(c), ALT(c), ALT(c), ... % Flight conditions
            ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),ALT(c),...
            PHI(c), NMACH, MACH(1), MACH(2), MACH(3), MACH(4), MACH(5),... % Mach numbers
            MACH(6), MACH(7), MACH(8), MACH(9), MACH(10), MACH(11),...
            MACH(12), MACH(13), MACH(14), MACH(15), MACH(16), MACH(17),...
            MACH(18), MACH(19), MACH(20),...
            NALPHA, ALPHA(1), ALPHA(2), ALPHA(3), ALPHA(4), ALPHA(5), ...   % Angles of attack
            ALPHA(6), ALPHA(7), ALPHA(8), ALPHA(9), ALPHA(10), ALPHA(11), ...
            ALPHA(12), ALPHA(13), ALPHA(14), ALPHA(15), ALPHA(16), ALPHA(17), ...
            ALPHA(18), ALPHA(19), ALPHA(20));
    end
end

case_batch = strjoin(cases);

fid = fopen("for005.dat","w");
fprintf(fid, case_batch);
fclose(fid);

%%Read For006 file
[~,~] = system("missiledatcom.exe"); % Run Missile Datcom Executable

aerotable = missiledatcomimport_batch(string(pwd+"\for006.dat"), case_number, NMACH, NALPHA); % Read DATCOM output file (for006.dat)

%% ____________
%% General Aero
CD = aerotable.CD; % Drag coeff
CL = aerotable.CL; % Lift coeff
%DP = aerotable.DP;  % Dynamic pressure
XCP = aerotable.XCP; % Center of pressure position in calibers, measured from the
% moment reference center, divided by reference length. Positive values 
% indicate c.p. forward of the moment reference point.

% Body axis static derivatives 
CA = aerotable.CA; % Axial force coefficient
CY = aerotable.CY; % Side force coefficient
CN = aerotable.CN; % Normal force coefficient
CLL = aerotable.CLL; % Rolling moment coefficient
CM = aerotable.CM; % Pitching moment coefficient
CLN = aerotable.CLN; % Yawing moment coefficient

CLLB = aerotable.CLLB; % Rolling moment coefficient derivative with BETA
CYB = aerotable.CYB; % Side force coefficient derivative with BETA
CLNB = aerotable.CLNB; % Yawing moment coefficient derivative with BETA

%CNA = aerotable.CNA; % Normal force coefficient derivative with ALPHA
%CMA = aerotable.CMA; % Pitching moment coefficient derivative with ALPHA

% Stability Derivatives
CAQ =  aerotable.CAQ; % Axial force coefficient due to pitch rate
CYR = aerotable.CYR; % Side force coefficient due to yaw rate
CYP = aerotable.CYP; % Side force coefficient due to roll rate
CNQ = aerotable.CNQ; % Normal force coefficient due to pitch rate
CNAD = aerotable.CNAD; % Normal force coefficient due to rate of change of angle of attack

CLLP = aerotable.CLLP; % Rolling moment coefficient due to roll rate
CLLR = aerotable.CLLR; % Rolling moment coefficient due to yaw rate
CMQ = aerotable.CMQ; % Pitching moment coefficient due to pitch rate
CMAD = aerotable.CMAD; % Pitching moment coefficient due to rate of change of angle of attack
CLNP = aerotable.CLNP; % Yawing moment coefficient due to roll rate
CLNR = aerotable.CLNR; % Yawing moment coefficient due to yaw rate

end
